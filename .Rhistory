learner_propensity_score <- "mlr3::lrn('glmnet', lambda = 0, alpha = 1)"
# specify the considered learners of the BCA and the CATE (here: lasso, random forest, and SVM)
learners_GenericML <- c("lasso",
"mlr3::lrn('ranger', num.trees = 100)",
"mlr3::lrn('svm')")
# specify the number of splits (many to rule out seed-dependence of results)
num_splits <- 100L
# specify if a HT transformation shall be used when estimating BLP and GATES
HT <- FALSE
# specify the significance level
significance_level <- 0.05
# specify which estimator of the error covariance matrix shall be used in BLP and GATES (standard OLS covariance matrix estimator here)
vcov_BLP   <- setup_vcov()
vcov_GATES <- setup_vcov()
# parallelization options
parallel  <- TRUE
num_cores <- 8L      # 8 cores
seed      <- 123456
### Run the GenericML() function with these arguments ----
genML <- GenericML(Z = Z,
D = D,
Y = Y,
learner_propensity_score = lps,
learners_GenericML = learners_GenericML,
num_splits = num_splits,
Z_CLAN = Z_CLAN,
HT = HT,
X1_BLP = X1_BLP,
X1_GATES = X1_GATES,
vcov_BLP = vcov_BLP,
vcov_GATES = vcov_GATES,
quantile_cutoffs = quantile_cutoffs,
# diff_GATES = diff_GATES,
# diff_CLAN = diff_CLAN,
equal_variances_CLAN = equal_variances_CLAN,
prop_aux = prop_aux,
stratify = stratify,
significance_level = significance_level,
# min_variation = min_variation,
parallel = parallel,
num_cores = num_cores,
seed = seed,
# store_splits = store_splits,
# store_learners = store_learners
)
D <- sampleselect %>% pull(!!sym(treatment))                                     # We need D and Y in vector form
y_variable <- varlist[6]
treatment <- treatlist[1]
D <- sampleselect %>% pull(!!sym(treatment))                                     # We need D and Y in vector form
Y <- sampleselect %>% pull(!!sym(y_variable))
### Run the GenericML() function with these arguments ----
genML <- GenericML(Z = Z,
D = D,
Y = Y,
learner_propensity_score = lps,
learners_GenericML = learners_GenericML,
num_splits = num_splits,
Z_CLAN = Z_CLAN,
HT = HT,
X1_BLP = X1_BLP,
X1_GATES = X1_GATES,
vcov_BLP = vcov_BLP,
vcov_GATES = vcov_GATES,
quantile_cutoffs = quantile_cutoffs,
# diff_GATES = diff_GATES,
# diff_CLAN = diff_CLAN,
equal_variances_CLAN = equal_variances_CLAN,
prop_aux = prop_aux,
stratify = stratify,
significance_level = significance_level,
# min_variation = min_variation,
parallel = parallel,
num_cores = num_cores,
seed = seed,
# store_splits = store_splits,
# store_learners = store_learners
)
sampleselect <- sampleselect %>%
filter(!!sym(treatment) == 1 | control == 1) %>%
select(all_of(varlist),                   # select relevant columns
all_of(controllist),
all_of(treatlist),
# all_of(controlsR)
) %>%
filter(complete.cases(.))                 # remove NAs
samplematrix <- data.matrix(sampleselect)                         # we need it in matrix form
D <- sampleselect %>% pull(!!sym(treatment))                                     # We need D and Y in vector form
Y <- sampleselect %>% pull(!!sym(y_variable))
### Run the GenericML() function with these arguments ----
genML <- GenericML(Z = Z,
D = D,
Y = Y,
learner_propensity_score = lps,
learners_GenericML = learners_GenericML,
num_splits = num_splits,
Z_CLAN = Z_CLAN,
HT = HT,
X1_BLP = X1_BLP,
X1_GATES = X1_GATES,
vcov_BLP = vcov_BLP,
vcov_GATES = vcov_GATES,
quantile_cutoffs = quantile_cutoffs,
# diff_GATES = diff_GATES,
# diff_CLAN = diff_CLAN,
equal_variances_CLAN = equal_variances_CLAN,
prop_aux = prop_aux,
stratify = stratify,
significance_level = significance_level,
# min_variation = min_variation,
parallel = parallel,
num_cores = num_cores,
seed = seed,
# store_splits = store_splits,
# store_learners = store_learners
)
Z_matrix <- sampleselect  %>%
# select(all_of(Z_names))  %>%
# scale() %>%
data.matrix()
Z_CLAN <- Z <- Z_matrix
### Run the GenericML() function with these arguments ----
genML <- GenericML(Z = Z,
D = D,
Y = Y,
learner_propensity_score = lps,
learners_GenericML = learners_GenericML,
num_splits = num_splits,
Z_CLAN = Z_CLAN,
HT = HT,
X1_BLP = X1_BLP,
X1_GATES = X1_GATES,
vcov_BLP = vcov_BLP,
vcov_GATES = vcov_GATES,
quantile_cutoffs = quantile_cutoffs,
# diff_GATES = diff_GATES,
# diff_CLAN = diff_CLAN,
equal_variances_CLAN = equal_variances_CLAN,
prop_aux = prop_aux,
stratify = stratify,
significance_level = significance_level,
# min_variation = min_variation,
parallel = parallel,
num_cores = num_cores,
seed = seed,
# store_splits = store_splits,
# store_learners = store_learners
)
### Run the GenericML() function with these arguments ----
genML <- GenericML(Z = Z,
D = D,
Y = Y,
learner_propensity_score = lps,
learners_GenericML = learners_GenericML,
num_splits = num_splits,
Z_CLAN = Z_CLAN,
HT = HT,
X1_BLP = X1_BLP,
X1_GATES = X1_GATES,
vcov_BLP = vcov_BLP,
vcov_GATES = vcov_GATES,
quantile_cutoffs = quantile_cutoffs,
# diff_GATES = diff_GATES,
# diff_CLAN = diff_CLAN,
# equal_variances_CLAN = equal_variances_CLAN,
prop_aux = prop_aux,
stratify = stratify,
significance_level = significance_level,
# min_variation = min_variation,
parallel = parallel,
num_cores = num_cores,
seed = seed,
# store_splits = store_splits,
# store_learners = store_learners
)
### Run the GenericML() function with these arguments ----
genML <- GenericML(Z = Z,
D = D,
Y = Y,
learner_propensity_score = lps,
learners_GenericML = learners_GenericML,
num_splits = num_splits,
Z_CLAN = Z_CLAN,
HT = HT,
X1_BLP = X1_BLP,
X1_GATES = X1_GATES,
vcov_BLP = vcov_BLP,
vcov_GATES = vcov_GATES,
quantile_cutoffs = quantile_cutoffs,
# diff_GATES = diff_GATES,
# diff_CLAN = diff_CLAN,
# equal_variances_CLAN = equal_variances_CLAN,
# prop_aux = prop_aux,
stratify = stratify,
significance_level = significance_level,
# min_variation = min_variation,
parallel = parallel,
num_cores = num_cores,
seed = seed,
# store_splits = store_splits,
# store_learners = store_learners
)
### Run the GenericML() function with these arguments ----
genML <- GenericML(Z = Z,
D = D,
Y = Y,
learner_propensity_score = learner_propensity_score,
learners_GenericML = learners_GenericML,
num_splits = num_splits,
Z_CLAN = Z_CLAN,
HT = HT,
X1_BLP = X1_BLP,
X1_GATES = X1_GATES,
vcov_BLP = vcov_BLP,
vcov_GATES = vcov_GATES,
quantile_cutoffs = quantile_cutoffs,
# diff_GATES = diff_GATES,
# diff_CLAN = diff_CLAN,
# equal_variances_CLAN = equal_variances_CLAN,
# prop_aux = prop_aux,
stratify = stratify,
significance_level = significance_level,
# min_variation = min_variation,
parallel = parallel,
num_cores = num_cores,
seed = seed,
# store_splits = store_splits,
# store_learners = store_learners
)
### Run the GenericML() function with these arguments ----
genML <- GenericML(Z = Z,
D = D,
Y = Y,
learner_propensity_score = learner_propensity_score,
learners_GenericML = learners_GenericML,
num_splits = num_splits,
Z_CLAN = Z_CLAN,
HT = HT,
X1_BLP = X1_BLP,
X1_GATES = X1_GATES,
vcov_BLP = vcov_BLP,
vcov_GATES = vcov_GATES,
quantile_cutoffs = quantile_cutoffs,
# diff_GATES = diff_GATES,
# diff_CLAN = diff_CLAN,
# equal_variances_CLAN = equal_variances_CLAN,
# prop_aux = prop_aux,
# stratify = stratify,
significance_level = significance_level,
# min_variation = min_variation,
parallel = parallel,
num_cores = num_cores,
seed = seed,
# store_splits = store_splits,
# store_learners = store_learners
)
## print
genML
knitr::opts_chunk$set(echo = TRUE)
# load data
studysample <- read.csv(here("data/studysampleclean.csv"))
# Define global variable list
varlist <- c("presence", "evmar05v3", "evpreg05v3", "evpregunmar05v3", "evunpregmar05v3", "dropout05v3",
"dropout07v2", "evmar07v2", "evpreg07v2", "evpregunmar07v2", "evunpregmar07v2")
treatlist <- c("Uonly", "Honly","UH")
controllist <- c("yrbirth_all", "yrbirth_missing", "date05v3", "date07v2", "schsize", "stratum")
#### Machine Learning ####
# newest version of GenericML not yet on CRAN so install from here (instead of include.R)
# devtools::install_github("mwelz/GenericML")
library("GenericML")
# pre-process
# sampleselect <- studysample %>%
#   select(all_of(varlist),                   # select relevant columns
#          all_of(controllist),
#          all_of(treatlist)) %>%
#   filter(complete.cases(.))                 # remove NAs
y_variable <- varlist[6]
treatment <- treatlist[1]
sampleselect <- studysample %>%
mutate(control = case_when(
Utreat.y == 0 & HIVtreat.y == 0 ~ 1,
TRUE ~ 0
))
sampleselect <- sampleselect %>%
filter(!!sym(treatment) == 1 | control == 1) %>%
select(all_of(varlist),                   # select relevant columns
all_of(controllist),
all_of(treatlist),
schoolid
) %>%
filter(complete.cases(.))                 # remove NA
samplematrix <- data.matrix(sampleselect)                         # we need it in matrix form
Uonly <- sampleselect$Uonly                                       # We need D and Y in vector form
Honly <- sampleselect$Honly
dropout05v3 <- sampleselect$dropout05v3
yrbirth_all <- as.numeric(factor(sampleselect$yrbirth_all))
# specify learners
learners <-
c("random_forest",                                              # Random Forest
"mlr3::lrn('cv_glmnet', s = 'lambda.min', alpha = 0.5)",      # Elastic Net Regularization on generalized linear model
"mlr3::lrn('svm')",                                           # Support vector machine
"mlr3::lrn('xgboost')")                                       # Gradient Boost
# Parameterize
seed <- 1833
cutoffs <- c(0.2, 0.4, 0.6, 0.8)
X1 <- setup_X1(funs_Z = c("B", "S")                    # include BCA and CATE controls
, fixed_effects = yrbirth_all
)
vcov <- setup_vcov(
# estimator = "vcovCL"              # I was not able to get this to take the vcovCL argument
arguments = list(cluster = sampleselect$schoolid)    # what are we meant to cluster on?
)
lps <- c("constant")
# X1 <- setup_X1(funs_Z = c("B", "S"))
num_splits <- 100L
sig_level <- 0.05
parallel <- TRUE
num_cores <- 6L
genML <- GenericML(
Z = samplematrix,                         # matrix
D = Uonly,                                # treatment assignment
Y = dropout05v3,                          # outcome response variable
learners_GenericML = learners,            # learners
learner_propensity_score = lps,           # = 0.5 (RCT)
num_splits = num_splits,                  # number splits, L is useful for specifying integer and therefore optimizing memory
quantile_cutoffs = cutoffs,               # grouping
significance_level = sig_level,           # significance level
X1_BLP = X1, X1_GATES = X1,               # regression setup
vcov_BLP = vcov, vcov_GATES = vcov,       # covariance setup
parallel = parallel,                      # parallelization
# num_cores = num_cores,
seed = seed                               # RNG seed
)
# BLP
results_BLP <- get_BLP(genML, plot = TRUE)
results_BLP       # print method
plot(results_BLP) # plot method
# GATES
results_GATES <- get_GATES(genML, plot = TRUE)
results_GATES
plot(results_GATES)
# Remove specified columns from sampleselect
samplematrix <- data.matrix(sampleselect[, !(names(sampleselect) %in% c("varlist", "treatlist"))])
genML <- GenericML(
Z = samplematrix,                         # matrix
D = Uonly,                                # treatment assignment
Y = dropout05v3,                          # outcome response variable
learners_GenericML = learners,            # learners
learner_propensity_score = lps,           # = 0.5 (RCT)
num_splits = num_splits,                  # number splits, L is useful for specifying integer and therefore optimizing memory
quantile_cutoffs = cutoffs,               # grouping
significance_level = sig_level,           # significance level
X1_BLP = X1, X1_GATES = X1,               # regression setup
vcov_BLP = vcov, vcov_GATES = vcov,       # covariance setup
parallel = parallel,                      # parallelization
# num_cores = num_cores,
seed = seed                               # RNG seed
)
# BLP
results_BLP <- get_BLP(genML, plot = TRUE)
results_BLP       # print method
plot(results_BLP) # plot method
# GATES
results_GATES <- get_GATES(genML, plot = TRUE)
results_GATES
plot(results_GATES)
knitr::opts_chunk$set(echo = TRUE)
# load data
studysample <- read.csv(here("data/studysampleclean.csv"))
# Define global variable list
varlist <- c("presence", "evmar05v3", "evpreg05v3", "evpregunmar05v3", "evunpregmar05v3", "dropout05v3",
"dropout07v2", "evmar07v2", "evpreg07v2", "evpregunmar07v2", "evunpregmar07v2")
treatlist <- c("Uonly", "Honly","UH")
controllist <- c("yrbirth_all", "yrbirth_missing", "date05v3", "date07v2", "schsize", "stratum")
#### Machine Learning ####
# newest version of GenericML not yet on CRAN so install from here (instead of include.R)
# devtools::install_github("mwelz/GenericML")
library("GenericML")
# pre-process
# sampleselect <- studysample %>%
#   select(all_of(varlist),                   # select relevant columns
#          all_of(controllist),
#          all_of(treatlist)) %>%
#   filter(complete.cases(.))                 # remove NAs
y_variable <- varlist[6]
treatment <- treatlist[1]
sampleselect <- studysample %>%
mutate(control = case_when(
Utreat.y == 0 & HIVtreat.y == 0 ~ 1,
TRUE ~ 0
))
sampleselect <- sampleselect %>%
filter(!!sym(treatment) == 1 | control == 1) %>%
select(all_of(varlist),                   # select relevant columns
all_of(controllist),
all_of(treatlist),
schoolid
) %>%
filter(complete.cases(.))                 # remove NA
# Remove specified columns from sampleselect
samplematrix <- data.matrix(sampleselect[, !(names(sampleselect) %in% c("varlist", "treatlist"))])
samplematrix1 <- data.matrix(sampleselect)                         # we need it in matrix form
Uonly <- sampleselect$Uonly                                       # We need D and Y in vector form
Honly <- sampleselect$Honly
dropout05v3 <- sampleselect$dropout05v3
yrbirth_all <- as.numeric(factor(sampleselect$yrbirth_all))
# specify learners
learners <-
c("random_forest",                                              # Random Forest
"mlr3::lrn('cv_glmnet', s = 'lambda.min', alpha = 0.5)",      # Elastic Net Regularization on generalized linear model
"mlr3::lrn('svm')",                                           # Support vector machine
"mlr3::lrn('xgboost')")                                       # Gradient Boost
# Parameterize
seed <- 1833
cutoffs <- c(0.2, 0.4, 0.6, 0.8)
X1 <- setup_X1(funs_Z = c("B", "S")                    # include BCA and CATE controls
, fixed_effects = yrbirth_all
)
vcov <- setup_vcov(
# estimator = "vcovCL"              # I was not able to get this to take the vcovCL argument
arguments = list(cluster = sampleselect$schoolid)    # what are we meant to cluster on?
)
lps <- c("constant")
# X1 <- setup_X1(funs_Z = c("B", "S"))
num_splits <- 100L
sig_level <- 0.05
parallel <- TRUE
num_cores <- 6L
knitr::opts_chunk$set(echo = TRUE)
# load data
studysample <- read.csv(here("data/studysampleclean.csv"))
# Define global variable list
varlist <- c("presence", "evmar05v3", "evpreg05v3", "evpregunmar05v3", "evunpregmar05v3", "dropout05v3",
"dropout07v2", "evmar07v2", "evpreg07v2", "evpregunmar07v2", "evunpregmar07v2")
treatlist <- c("Uonly", "Honly","UH")
controllist <- c("yrbirth_all", "yrbirth_missing", "date05v3", "date07v2", "schsize", "stratum")
#### Machine Learning ####
# newest version of GenericML not yet on CRAN so install from here (instead of include.R)
# devtools::install_github("mwelz/GenericML")
library("GenericML")
# pre-process
# sampleselect <- studysample %>%
#   select(all_of(varlist),                   # select relevant columns
#          all_of(controllist),
#          all_of(treatlist)) %>%
#   filter(complete.cases(.))                 # remove NAs
y_variable <- varlist[6]
treatment <- treatlist[1]
sampleselect <- studysample %>%
mutate(control = case_when(
Utreat.y == 0 & HIVtreat.y == 0 ~ 1,
TRUE ~ 0
))
sampleselect <- sampleselect %>%
filter(!!sym(treatment) == 1 | control == 1) %>%
select(all_of(varlist),                   # select relevant columns
all_of(controllist),
all_of(treatlist),
schoolid
) %>%
filter(complete.cases(.))                 # remove NA
# Remove specified columns from sampleselect
samplematrix <- data.matrix(sampleselect[, !(names(sampleselect) %in% c(varlist, treatlist))])
samplematrix1 <- data.matrix(sampleselect)                         # we need it in matrix form
Uonly <- sampleselect$Uonly                                       # We need D and Y in vector form
Honly <- sampleselect$Honly
dropout05v3 <- sampleselect$dropout05v3
yrbirth_all <- as.numeric(factor(sampleselect$yrbirth_all))
# specify learners
learners <-
c("random_forest",                                              # Random Forest
"mlr3::lrn('cv_glmnet', s = 'lambda.min', alpha = 0.5)",      # Elastic Net Regularization on generalized linear model
"mlr3::lrn('svm')",                                           # Support vector machine
"mlr3::lrn('xgboost')")                                       # Gradient Boost
# Parameterize
seed <- 1833
cutoffs <- c(0.2, 0.4, 0.6, 0.8)
X1 <- setup_X1(funs_Z = c("B", "S")                    # include BCA and CATE controls
, fixed_effects = yrbirth_all
)
vcov <- setup_vcov(
# estimator = "vcovCL"              # I was not able to get this to take the vcovCL argument
arguments = list(cluster = sampleselect$schoolid)    # what are we meant to cluster on?
)
lps <- c("constant")
# X1 <- setup_X1(funs_Z = c("B", "S"))
num_splits <- 100L
sig_level <- 0.05
parallel <- TRUE
num_cores <- 6L
genML <- GenericML(
Z = samplematrix,                         # matrix
D = Uonly,                                # treatment assignment
Y = dropout05v3,                          # outcome response variable
learners_GenericML = learners,            # learners
learner_propensity_score = lps,           # = 0.5 (RCT)
num_splits = num_splits,                  # number splits, L is useful for specifying integer and therefore optimizing memory
quantile_cutoffs = cutoffs,               # grouping
significance_level = sig_level,           # significance level
X1_BLP = X1, X1_GATES = X1,               # regression setup
vcov_BLP = vcov, vcov_GATES = vcov,       # covariance setup
parallel = parallel,                      # parallelization
# num_cores = num_cores,
seed = seed                               # RNG seed
)
# BLP
results_BLP <- get_BLP(genML, plot = TRUE)
results_BLP       # print method
plot(results_BLP) # plot method
# GATES
results_GATES <- get_GATES(genML, plot = TRUE)
results_GATES
plot(results_GATES)
