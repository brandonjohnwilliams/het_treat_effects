mutate(control = case_when(
Utreat.y == 0 & HIVtreat.y == 0 ~ 1,
TRUE ~ 0
))
sampleselect <- studysample %>%
select(all_of(varlist),                   # select relevant columns
all_of(controllist),
all_of(treatlist),
schoolid
) %>%
filter(complete.cases(.))                 # remove NA
studysample <- merge(studysample, school,
by = c("schoolid", "date05v3", "date07v2", "schsize", "stratum")
)
### Data, global variables, and packages
knitr::opts_chunk$set(echo = TRUE)
# load data
studysample <- read.csv(here("data/studysampleclean.csv"))
# Define global variable list
varlist <- c("presence",
"evmar05v3",
"evpreg05v3",
"evpregunmar05v3",
"evunpregmar05v3",
"dropout05v3",
"dropout07v2",
"evmar07v2",
"evpreg07v2",
"evpregunmar07v2",
"evunpregmar07v2"
)
treatlist <- c("Uonly",
"Honly",
"UH"
)
controllist <- c("yrbirth_all",
"yrbirth_missing",
"date05v3",
"date07v2",
"schsize",
"stratum")
# newest version of GenericML not yet on CRAN so install from here (instead of include.R)
# devtools::install_github("mwelz/GenericML")
library("GenericML")
school <- read_dta(here("data/school_info.dta"))
studysample <- merge(studysample, school,
by = c("schoolid", "date05v3", "date07v2", "schsize", "stratum")
)
controllist <- c("yrbirth_all",
"yrbirth_missing",
"date05v3",
"date07v2",
"schsize",
"stratum",
"meanexp",
"latrine_2004",
"sdkcpe",
"ratio02"
)
### Data, global variables, and packages
knitr::opts_chunk$set(echo = TRUE)
# load data
studysample <- read.csv(here("data/studysampleclean.csv"))
# Define global variable list
varlist <- c("presence",
"evmar05v3",
"evpreg05v3",
"evpregunmar05v3",
"evunpregmar05v3",
"dropout05v3",
"dropout07v2",
"evmar07v2",
"evpreg07v2",
"evpregunmar07v2",
"evunpregmar07v2"
)
treatlist <- c("Uonly",
"Honly",
"UH"
)
controllist <- c("yrbirth_all",
"yrbirth_missing",
"date05v3",
"date07v2",
"schsize",
"stratum")
# newest version of GenericML not yet on CRAN so install from here (instead of include.R)
# devtools::install_github("mwelz/GenericML")
library("GenericML")
school <- read_dta(here("data/school_info.dta"))
studysample <- merge(studysample, school,
by = "schoolid",
suffixes = c("", ".y")
)
controllist <- c("yrbirth_all",
"yrbirth_missing",
"date05v3",
"date07v2",
"schsize",
"stratum",
"meanexp",                # teacher experience
"latrine_2004",           # number of latrines in the school
"sdkcpe",                 # school score ranking in SDs
"ratio02"                 # school gender ratio
)
studysample <- studysample %>%
mutate(control = case_when(
Utreat.y == 0 & HIVtreat.y == 0 ~ 1,
TRUE ~ 0
))
sampleselect <- studysample %>%
select(all_of(varlist),                   # select relevant columns
all_of(controllist),
all_of(treatlist),
schoolid
) %>%
filter(complete.cases(.))                 # remove NA
Uonly <- sampleselect$Uonly
Honly <- sampleselect$Honly
UH <- sampleselect$UH
# Remove specified columns from sampleselect
samplematrix <- data.matrix(sampleselect[, !(names(sampleselect) %in% c(varlist, treatlist))])
samplematrix1 <- data.matrix(sampleselect)                         # we need it in matrix form
yrbirth_all <- as.numeric(factor(sampleselect$yrbirth_all))
### ML Parameters
# specify learners
learners <-
c("random_forest",                                              # Random Forest
"mlr3::lrn('cv_glmnet', s = 'lambda.min', alpha = 0.5)",      # Elastic Net Regularization on generalized linear model
"mlr3::lrn('svm')",                                           # Support vector machine
"mlr3::lrn('xgboost')")                                       # Gradient Boost
# Parameterize
seed <- 1833
cutoffs <- c(0.2, 0.4, 0.6, 0.8)
X1 <- setup_X1(funs_Z = c("B", "S")                    # include BCA and CATE controls
, fixed_effects = yrbirth_all           # cohort effect
)
vcov <- setup_vcov(
# estimator = "vcovCL"              # I was not able to get this to take the vcovCL argument
arguments = list(cluster = sampleselect$schoolid)    # cluster on school
)
lps <- c("constant")
num_splits <- 100L
sig_level <- 0.05
parallel <- TRUE
num_cores <- 6L
y_variable <- varlist[6]            # "dropout05v3"
treatment <- treatlist[1]           # "Uonly"
genML <- GenericML(
Z = samplematrix,                         # matrix
D = Uonly,                                # treatment assignment
Y = dropout05v3,                          # outcome response variable
learners_GenericML = learners,            # learners
learner_propensity_score = lps,           # = 0.5 (RCT)
num_splits = num_splits,                  # number splits, L is useful for specifying integer and therefore optimizing memory
quantile_cutoffs = cutoffs,               # grouping
significance_level = sig_level,           # significance level
X1_BLP = X1, X1_GATES = X1,               # regression setup
vcov_BLP = vcov, vcov_GATES = vcov,       # covariance setup
parallel = parallel,                      # parallelization
# num_cores = num_cores,
seed = seed                               # RNG seed
)
genML <- GenericML(
Z = samplematrix,                         # matrix
D = Uonly,                                # treatment assignment
Y = y_variable,                          # outcome response variable
learners_GenericML = learners,            # learners
learner_propensity_score = lps,           # = 0.5 (RCT)
num_splits = num_splits,                  # number splits, L is useful for specifying integer and therefore optimizing memory
quantile_cutoffs = cutoffs,               # grouping
significance_level = sig_level,           # significance level
X1_BLP = X1, X1_GATES = X1,               # regression setup
vcov_BLP = vcov, vcov_GATES = vcov,       # covariance setup
parallel = parallel,                      # parallelization
# num_cores = num_cores,
seed = seed                               # RNG seed
)
genML <- GenericML(
Z = samplematrix,                         # matrix
D = treatment,                                # treatment assignment
Y = y_variable,                          # outcome response variable
learners_GenericML = learners,            # learners
learner_propensity_score = lps,           # = 0.5 (RCT)
num_splits = num_splits,                  # number splits, L is useful for specifying integer and therefore optimizing memory
quantile_cutoffs = cutoffs,               # grouping
significance_level = sig_level,           # significance level
X1_BLP = X1, X1_GATES = X1,               # regression setup
vcov_BLP = vcov, vcov_GATES = vcov,       # covariance setup
parallel = parallel,                      # parallelization
# num_cores = num_cores,
seed = seed                               # RNG seed
)
genML <- GenericML(
Z = samplematrix,                         # matrix
D = Uonly,                                # treatment assignment
Y = dropout05v3,                          # outcome response variable
learners_GenericML = learners,            # learners
learner_propensity_score = lps,           # = 0.5 (RCT)
num_splits = num_splits,                  # number splits, L is useful for specifying integer and therefore optimizing memory
quantile_cutoffs = cutoffs,               # grouping
significance_level = sig_level,           # significance level
X1_BLP = X1, X1_GATES = X1,               # regression setup
vcov_BLP = vcov, vcov_GATES = vcov,       # covariance setup
parallel = parallel,                      # parallelization
# num_cores = num_cores,
seed = seed                               # RNG seed
)
D <- sampleselect$treatment
D <- sampleselect[[treatment]]
D <- sampleselect[[treatlist[1]]]
Y <- sampleselect[[varlist[6]]]            # "dropout05v3"
genML <- GenericML(
Z = samplematrix,                         # matrix
D = D,                                # treatment assignment
Y = Y,                          # outcome response variable
learners_GenericML = learners,            # learners
learner_propensity_score = lps,           # = 0.5 (RCT)
num_splits = num_splits,                  # number splits, L is useful for specifying integer and therefore optimizing memory
quantile_cutoffs = cutoffs,               # grouping
significance_level = sig_level,           # significance level
X1_BLP = X1, X1_GATES = X1,               # regression setup
vcov_BLP = vcov, vcov_GATES = vcov,       # covariance setup
parallel = parallel,                      # parallelization
# num_cores = num_cores,
seed = seed                               # RNG seed
)
# BLP
results_BLP <- get_BLP(genML, plot = TRUE)
results_BLP       # print method
plot(results_BLP) # plot method
# GATES
results_GATES <- get_GATES(genML, plot = TRUE)
results_GATES
plot(results_GATES)
# best learners
get_best(genML)
sampleselect1 <- sampleselect[, !(names(sampleselect) %in% c(varlist, treatlist))]
View(sampleselect1)
# CLAN
results_CLAN <- get_CLAN(genML, variable = "schsize", plot = TRUE)
results_CLAN
plot(results_CLAN)
learners <-
c("mlr3::lrn('xgboost')")                                       # Gradient Boost
learners <-
c("mlr3::lrn('xgboost')")                                       # Gradient Boost
genML <- GenericML(
Z = samplematrix,                         # matrix
D = Honly,                                # treatment assignment
Y = dropout05v3,                          # outcome response variable
learners_GenericML = learners,            # learners
learner_propensity_score = lps,           # = 0.5 (RCT)
num_splits = num_splits,                  # number splits, L is useful for specifying integer and therefore optimizing memory
quantile_cutoffs = cutoffs,               # grouping
significance_level = sig_level,           # significance level
X1_BLP = X1, X1_GATES = X1,               # regression setup
vcov_BLP = vcov, vcov_GATES = vcov,       # covariance setup
parallel = parallel,                      # parallelization
# num_cores = num_cores,
seed = seed                               # RNG seed
)
genML <- GenericML(
Z = Z,                                    # matrix
D = D,                                    # treatment assignment
Y = Y,                                    # outcome response variable
learners_GenericML = learners,            # learners
learner_propensity_score = lps,           # = 0.5 (RCT)
num_splits = num_splits,                  # number splits, L is useful for specifying integer and therefore optimizing memory
quantile_cutoffs = cutoffs,               # grouping
significance_level = sig_level,           # significance level
X1_BLP = X1, X1_GATES = X1,               # regression setup
vcov_BLP = vcov, vcov_GATES = vcov,       # covariance setup
parallel = parallel,                      # parallelization
# num_cores = num_cores,
seed = seed                               # RNG seed
)
genML <- GenericML(
Z = samplematrix,                         # matrix
D = D,                                    # treatment assignment
Y = Y,                                    # outcome response variable
learners_GenericML = learners,            # learners
learner_propensity_score = lps,           # = 0.5 (RCT)
num_splits = num_splits,                  # number splits, L is useful for specifying integer and therefore optimizing memory
quantile_cutoffs = cutoffs,               # grouping
significance_level = sig_level,           # significance level
X1_BLP = X1, X1_GATES = X1,               # regression setup
vcov_BLP = vcov, vcov_GATES = vcov,       # covariance setup
parallel = parallel,                      # parallelization
# num_cores = num_cores,
seed = seed                               # RNG seed
)
# BLP
results_BLP <- get_BLP(genML, plot = TRUE)
results_BLP       # print method
plot(results_BLP) # plot method
# GATES
results_GATES <- get_GATES(genML, plot = TRUE)
results_GATES
plot(results_GATES)
learners <-
c("mlr3::lrn('xgboost')")                                       # Gradient Boost
genML <- GenericML(
Z = samplematrix,                         # matrix
D = D,                                    # treatment assignment
Y = Y,                                    # outcome response variable
learners_GenericML = learners,            # learners
learner_propensity_score = lps,           # = 0.5 (RCT)
num_splits = num_splits,                  # number splits, L is useful for specifying integer and therefore optimizing memory
quantile_cutoffs = cutoffs,               # grouping
significance_level = sig_level,           # significance level
X1_BLP = X1, X1_GATES = X1,               # regression setup
vcov_BLP = vcov, vcov_GATES = vcov,       # covariance setup
parallel = parallel,                      # parallelization
# num_cores = num_cores,
seed = seed                               # RNG seed
)
learners <-
c("mlr3::lrn('xgboost')")                                       # Gradient Boost
# Start timer
start_time <- Sys.time()
# Loop over the first 11 entries in varlist
for (i in 1:11) {
# Select outcome variable Y and treatment assignment D
Y <- sampleselect[[varlist[i]]]
D <- sampleselect[[treatlist[1]]]  # Assuming treatlist[1] is constant across iterations
# Run the GenericML function for each Y
genML <- GenericML(
Z = Z,                                    # matrix
D = D,                                    # treatment assignment
Y = Y,                                    # outcome response variable
learners_GenericML = learners,            # learners
learner_propensity_score = lps,           # = 0.5 (RCT)
num_splits = num_splits,                  # number splits, L is useful for specifying integer and therefore optimizing memory
quantile_cutoffs = cutoffs,               # grouping
significance_level = sig_level,           # significance level
X1_BLP = X1, X1_GATES = X1,               # regression setup
vcov_BLP = vcov, vcov_GATES = vcov,       # covariance setup
parallel = parallel,                      # parallelization
# num_cores = num_cores,
seed = seed                               # RNG seed
)
# Display progress message
cat("Completed iteration:", i, "of 11\n")
}
learners <-
c("mlr3::lrn('xgboost')")                                       # Gradient Boost
# Start timer
start_time <- Sys.time()
# Loop over the first 11 entries in varlist
for (i in 1:11) {
# Select outcome variable Y and treatment assignment D
Y <- sampleselect[[varlist[i]]]
D <- sampleselect[[treatlist[1]]]  # Assuming treatlist[1] is constant across iterations
# Run the GenericML function for each Y
genML <- GenericML(
Z = samplematrix,                         # matrix
D = D,                                    # treatment assignment
Y = Y,                                    # outcome response variable
learners_GenericML = learners,            # learners
learner_propensity_score = lps,           # = 0.5 (RCT)
num_splits = num_splits,                  # number splits, L is useful for specifying integer and therefore optimizing memory
quantile_cutoffs = cutoffs,               # grouping
significance_level = sig_level,           # significance level
X1_BLP = X1, X1_GATES = X1,               # regression setup
vcov_BLP = vcov, vcov_GATES = vcov,       # covariance setup
parallel = parallel,                      # parallelization
# num_cores = num_cores,
seed = seed                               # RNG seed
)
# Display progress message
cat("Completed iteration:", i, "of 11\n")
}
# End timer and calculate elapsed time
end_time <- Sys.time()
total_time <- end_time - start_time
cat("Total time taken:", total_time, "\n")
learners <-
c("mlr3::lrn('xgboost')")                                       # Gradient Boost
# Start timer
start_time <- Sys.time()
# Initialize a list to store results
genML_results <- list()
# Loop over the first 11 entries in varlist
for (i in 1:11) {
# Select outcome variable Y and treatment assignment D
Y <- sampleselect[[varlist[i]]]
D <- sampleselect[[treatlist[1]]]  # Keeping constant across iterations
# Run the GenericML function for each Y
genML <- GenericML(
Z = samplematrix,                         # matrix
D = D,                                    # treatment assignment
Y = Y,                                    # outcome response variable
learners_GenericML = learners,            # learners
learner_propensity_score = lps,           # = 0.5 (RCT)
num_splits = num_splits,                  # number splits, L is useful for specifying integer and therefore optimizing memory
quantile_cutoffs = cutoffs,               # grouping
significance_level = sig_level,           # significance level
X1_BLP = X1, X1_GATES = X1,               # regression setup
vcov_BLP = vcov, vcov_GATES = vcov,       # covariance setup
parallel = parallel,                      # parallelization
# num_cores = num_cores,
seed = seed                               # RNG seed
)
# Save the result for each iteration in the list
genML_results[[i]] <- genML
# Display progress message
cat("Completed iteration:", i, "of 11\n")
}
# End timer and calculate elapsed time
end_time <- Sys.time()
total_time <- end_time - start_time
cat("Total time taken:", total_time, "\n")
# BLP
for (i in 1:11) {
results_BLP <- get_BLP(genML_results[[i]], plot = TRUE)
plot(results_BLP) # plot method
}
results_BLP <- get_BLP(genML_results1, plot = TRUE)
results_BLP <- get_BLP(genML_results[1], plot = TRUE)
results_BLP <- get_BLP(genML_results[[1]], plot = TRUE)
plot(results_BLP) # plot method
# BLP
for (i in 1:11) {
results_BLP[[i]] <- get_BLP(genML_results[[i]], plot = TRUE)
plot(results_BLP[[i]]) # plot method
}
results_BLP1 <- get_BLP(genML_results[[1]], plot = TRUE)
plot(results_BLP1) # plot method
# BLP
for (i in 1:11) {
results_BLP[i] <- get_BLP(genML_results[[i]], plot = TRUE)
plot(results_BLP[i]) # plot method
}
# BLP
# Loop over each genML result stored in genML_results
for (i in 1:11) {
# Get BLP results with plot enabled
results_BLP <- get_BLP(genML_results[[i]], plot = TRUE)
# Plot the results
plot(results_BLP)
# Display progress message
cat("Completed BLP plot for iteration:", i, "of 11\n")
}
# BLP
# Loop over each genML result stored in genML_results
for (i in 1:11) {
# Get BLP results with plot enabled
results_BLP <- get_BLP(genML_results[[i]], plot = TRUE)
# Plot the results
print(plot(results_BLP))
}
# GATES
# Loop over each genML result stored in genML_results
for (i in 1:11) {
# Get BLP results with plot enabled
results_GATES <- get_GATES(genML_results[[i]], plot = TRUE)
# Plot the results
print(plot(results_GATES))
}
learners <-
c("mlr3::lrn('xgboost')")                                       # Gradient Boost
# Start timer
start_time <- Sys.time()
# Initialize a list to store results
genML_results_Honly <- list()
# Loop over the first 11 entries in varlist
for (i in 1:11) {
# Select outcome variable Y and treatment assignment D
Y <- sampleselect[[varlist[i]]]
D <- sampleselect[[treatlist[2]]]  # Honly
# Run the GenericML function for each Y
genML <- GenericML(
Z = samplematrix,                         # matrix
D = D,                                    # treatment assignment
Y = Y,                                    # outcome response variable
learners_GenericML = learners,            # learners
learner_propensity_score = lps,           # = 0.5 (RCT)
num_splits = num_splits,                  # number splits, L is useful for specifying integer and therefore optimizing memory
quantile_cutoffs = cutoffs,               # grouping
significance_level = sig_level,           # significance level
X1_BLP = X1, X1_GATES = X1,               # regression setup
vcov_BLP = vcov, vcov_GATES = vcov,       # covariance setup
parallel = parallel,                      # parallelization
# num_cores = num_cores,
seed = seed                               # RNG seed
)
# Save the result for each iteration in the list
genML_results_Honly[[i]] <- genML
# Display progress message
cat("Completed iteration:", i, "of 11\n")
}
# End timer and calculate elapsed time
end_time <- Sys.time()
total_time <- end_time - start_time
cat("Total time taken:", total_time, "\n")
# BLP
# Loop over each genML result stored in genML_results
for (i in 1:11) {
# Get BLP results with plot enabled
results_BLP <- get_BLP(genML_results[[i]], plot = TRUE)
# Plot the results
print(plot(results_BLP))
}
# GATES
# Loop over each genML result stored in genML_results
for (i in 1:11) {
# Get BLP results with plot enabled
results_GATES <- get_GATES(genML_results[[i]], plot = TRUE)
# Plot the results
print(plot(results_GATES))
}
