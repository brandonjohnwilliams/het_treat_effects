axis.line = element_line(colour = "black"),
axis.text=element_text(size=16),
axis.title=element_text(size=18,face="bold")
)+xlab('Number of Tokens')+ylab('Indifference payment ($)')
myPlot
cost_model_lm <- lm( wta ~ blue + gaps + sqrt.nBall + nBall, data=costData)
summary(cost_model_lm)
cost_model_tobit <-tobit( wta ~ blue + gaps + sqrt.nBall + nBall, data=costData,left=0.5,right=1.5)
summary(cost_model_tobit)
#
newData<- data.frame(cbind(nBall=50:200))
newData$sqrt.nBall<- sqrt(newData$nBall)
newData$gaps<- 0
newData$blue<- 0
newData$no.gap.cost <- predict(cost_model_tobit,newdata = newData)-0.5
newData$no.gap.cost.se <- predict(cost_model_tobit,newdata = newData,se.fit=TRUE)$se.fit
newData$no.gap.cost.upr <- newData$no.gap.cost + 1.96*newData$no.gap.cost.se
newData$no.gap.cost.lwr <- newData$no.gap.cost - 1.96*newData$no.gap.cost.se
newData$gaps<- 1
newData$gap.cost <- predict(cost_model_tobit,newdata = newData)-0.5
newData$gap.cost.se <- predict(cost_model_tobit,newdata = newData,se.fit=TRUE)$se.fit
newData$gap.cost.upr <- newData$gap.cost + 1.96*newData$gap.cost.se
newData$gap.cost.lwr <- newData$gap.cost - 1.96*newData$gap.cost.se
myPlot <- ggplot(newData)+
geom_line(aes(x=nBall,y=no.gap.cost),color='#004cff',linewidth=2)+
geom_line(aes(x=nBall,y=no.gap.cost.upr),color='#004cff',linetype="dashed")+
geom_line(aes(x=nBall,y=no.gap.cost.lwr),color='#004cff',linetype="dashed")+
geom_line(aes(x=nBall,y=gap.cost),color='#FF5032',linewidth=2)+
geom_line(aes(x=nBall,y=gap.cost.upr),color='#FF5032',linetype="dashed")+
geom_line(aes(x=nBall,y=gap.cost.lwr),color='#FF5032',linetype="dashed")+
theme(
panel.background = element_rect(fill='transparent'),
plot.background = element_rect(fill='transparent', color=NA),
panel.grid.minor = element_blank(),
legend.background = element_rect(fill='transparent'),
legend.box.background = element_rect(fill='transparent'),
axis.line = element_line(colour = "black"),
axis.text=element_text(size=16),
axis.title=element_text(size=18,face="bold")
)+xlab('Number of Tokens')+ylab('Indifference payment ($)')
myPlot
ggsave(file="CostPlot.svg", plot=myPlot, width=10, height=10)
cost_model_lm <- lm( wta ~ blue + gaps + sqrt.nBall + nBall, data=costData)
summary(cost_model_lm)
cost_model_re <- plm( wta ~ blue+ non.blue + gaps + ball.size , data=costData,
index=c('participant_id','subsession.round_number'), model="random")
cost_model_fe <- plm( wta ~ blue+ non.blue + gaps + ball.size , data=costData,
index=c('participant_id','subsession.round_number'), model="within")
summary(cost_model_fe)
# Time taken in stage 1
calib$stage1['non.blue'] <- calib$stage1$player.redBall1 + calib$stage1$player.purpleBall1
calib$stage1['blue'] <- calib$stage1$player.mainBall1
calib$stage1['time.taken'] <- calib$stage1$player.timeElapsed
calib$stage1['gaps'] <- calib$stage1$player.vac1
calib$stage1['t'] <- calib$stage1$subsession.round_number
calib$stage1['i'] <- calib$stage1$participant_id
calib$stage1['sqrt.nBall'] <- sqrt(calib$stage1['non.blue']+calib$stage1['blue'])
calib$stage1['nBall'] <- (calib$stage1['non.blue']+calib$stage1['blue'])
calib$stage1['nSq'] <- ceiling(sqrt(calib$stage1$blue+calib$stage1$non.blue))
calib$stage1['num.correct'] <- calib$stage1$player.countedBalls== calib$stage1$blue
calib$stage1['denom.correct'] <- calib$stage1$player.totalBalls== (calib$stage1$blue + calib$stage1$non.blue)
calib$stage1['correct'] <- (calib$stage1['num.correct'] +calib$stage1['denom.correct'])==2
calib$stage1['error'] <-  abs(
100*( calib$stage1$player.countedBalls/calib$stage1$player.totalBalls )
- 100*( calib$stage1$blue/(calib$stage1$blue + calib$stage1$non.blue) ) )
calib$stage1['error.5'] <- ifelse( calib$stage1$error<5 ,TRUE,FALSE)
calib$stage1['error.1'] <- ifelse( calib$stage1$error<=1 ,TRUE,FALSE)
timeData <- calib$stage1[  , c('i','t','time.taken',
'blue','non.blue','gaps','sqrt.nBall', 'nBall','nSq',
'correct','error','error.1') ]
time_model_lm <- lm( time.taken ~ blue + gaps +  nBall , data=subset(timeData,error.1==TRUE))
summary(time_model_lm)
newData<- data.frame(cbind(nBall=50:200))
newData$sqrt.nBall<- sqrt(newData$nBall)
newData$gaps<- 0
newData$blue<- newData$nBall/2
newData$no.gap.cost <- predict(time_model_lm,newdata = newData)
newData$no.gap.cost.se <- predict(time_model_lm,newdata = newData,se.fit=TRUE)$se.fit
newData$no.gap.cost.upr <- newData$no.gap.cost + 1.96*newData$no.gap.cost.se
newData$no.gap.cost.lwr <- newData$no.gap.cost - 1.96*newData$no.gap.cost.se
newData$gaps<- 1
newData$gap.cost <- predict(time_model_lm,newdata = newData)
newData$gap.cost.se <- predict(time_model_lm,newdata = newData,se.fit=TRUE)$se.fit
newData$gap.cost.upr <- newData$gap.cost + 1.96*newData$gap.cost.se
newData$gap.cost.lwr <- newData$gap.cost - 1.96*newData$gap.cost.se
myPlot <- ggplot(newData)+
geom_line(aes(x=nBall,y=no.gap.cost),color='#004cff',linewidth=2)+
geom_line(aes(x=nBall,y=no.gap.cost.upr),color='#004cff',linetype="dashed")+
geom_line(aes(x=nBall,y=no.gap.cost.lwr),color='#004cff',linetype="dashed")+
geom_line(aes(x=nBall,y=gap.cost),color='#FF5032',linewidth=2)+
geom_line(aes(x=nBall,y=gap.cost.upr),color='#FF5032',linetype="dashed")+
geom_line(aes(x=nBall,y=gap.cost.lwr),color='#FF5032',linetype="dashed")+
theme(
panel.background = element_rect(fill='transparent'),
plot.background = element_rect(fill='transparent', color=NA),
panel.grid.minor = element_blank(),
legend.background = element_rect(fill='transparent'),
legend.box.background = element_rect(fill='transparent'),
axis.line = element_line(colour = "black"),
axis.text=element_text(size=16),
axis.title=element_text(size=18,face="bold")
)+xlab('Number of balls')+ylab('Time to complete (seconds)')
myPlot
cost_model_lm <- lm( wta ~ blue + gaps + sqrt.nBall + nBall, data=costData)
summary(cost_model_lm)
cost_model_tobit <-tobit( wta ~ blue + gaps + sqrt.nBall + nBall, data=costData,left=0.5,right=1.5)
summary(cost_model_tobit)
#
newData<- data.frame(cbind(nBall=50:200))
newData$sqrt.nBall<- sqrt(newData$nBall)
newData$gaps<- 0
newData$blue<- 0
newData$no.gap.cost <- predict(cost_model_tobit,newdata = newData)-0.5
newData$no.gap.cost.se <- predict(cost_model_tobit,newdata = newData,se.fit=TRUE)$se.fit
newData$no.gap.cost.upr <- newData$no.gap.cost + 1.96*newData$no.gap.cost.se
newData$no.gap.cost.lwr <- newData$no.gap.cost - 1.96*newData$no.gap.cost.se
newData$gaps<- 1
newData$gap.cost <- predict(cost_model_tobit,newdata = newData)-0.5
newData$gap.cost.se <- predict(cost_model_tobit,newdata = newData,se.fit=TRUE)$se.fit
newData$gap.cost.upr <- newData$gap.cost + 1.96*newData$gap.cost.se
newData$gap.cost.lwr <- newData$gap.cost - 1.96*newData$gap.cost.se
View(newData)
View(newData)
View(newData)
predict(cost_model_tobit,newdata = newData,se.fit=TRUE)
thing<-predict(cost_model_tobit,newdata = newData,se.fit=TRUE)
View(thing)
time_model_lm <- lm( time.taken ~ blue + gaps +  nBall , data=subset(timeData,error.1==TRUE))
summary(time_model_lm)
?predict
time_model_lm <- lm( time.taken ~ blue + gaps +  nBall , data=subset(timeData,error.1==TRUE))
summary(time_model_lm)
newData<- data.frame(cbind(nBall=50:200))
newData$sqrt.nBall<- sqrt(newData$nBall)
newData$gaps<- 0
newData$blue<- newData$nBall/2
newData$no.gap.cost <- predict(time_model_lm,newdata = newData)
# newData$no.gap.cost.se <- predict(time_model_lm,newdata = newData,se.fit=TRUE)$se.fit
newData$no.gap.cost.upr <- newData$no.gap.cost + 1.96*newData$11.0464
time_model_lm <- lm( time.taken ~ blue + gaps +  nBall , data=subset(timeData,error.1==TRUE))
summary(time_model_lm)
newData<- data.frame(cbind(nBall=50:200))
newData$sqrt.nBall<- sqrt(newData$nBall)
newData$gaps<- 0
newData$blue<- newData$nBall/2
newData$no.gap.cost <- predict(time_model_lm,newdata = newData)
# newData$no.gap.cost.se <- predict(time_model_lm,newdata = newData,se.fit=TRUE)$se.fit
newData$no.gap.cost.upr <- newData$no.gap.cost + 1.96*11.0464
newData$no.gap.cost.lwr <- newData$no.gap.cost - 1.96*11.0464
newData$gaps<- 1
newData$gap.cost <- predict(time_model_lm,newdata = newData)
newData$gap.cost.se <- predict(time_model_lm,newdata = newData,se.fit=TRUE)$se.fit
newData$gap.cost.upr <- newData$gap.cost + 1.96*11.0464
newData$gap.cost.lwr <- newData$gap.cost - 1.96*11.0464
myPlot <- ggplot(newData)+
geom_line(aes(x=nBall,y=no.gap.cost),color='#004cff',linewidth=2)+
geom_line(aes(x=nBall,y=no.gap.cost.upr),color='#004cff',linetype="dashed")+
geom_line(aes(x=nBall,y=no.gap.cost.lwr),color='#004cff',linetype="dashed")+
geom_line(aes(x=nBall,y=gap.cost),color='#FF5032',linewidth=2)+
geom_line(aes(x=nBall,y=gap.cost.upr),color='#FF5032',linetype="dashed")+
geom_line(aes(x=nBall,y=gap.cost.lwr),color='#FF5032',linetype="dashed")+
theme(
panel.background = element_rect(fill='transparent'),
plot.background = element_rect(fill='transparent', color=NA),
panel.grid.minor = element_blank(),
legend.background = element_rect(fill='transparent'),
legend.box.background = element_rect(fill='transparent'),
axis.line = element_line(colour = "black"),
axis.text=element_text(size=16),
axis.title=element_text(size=18,face="bold")
)+xlab('Number of balls')+ylab('Time to complete (seconds)')
myPlot
cost_model_tobit <-tobit( wta ~ blue + gaps + sqrt.nBall + nBall, data=costData,left=0.5,right=1.5)
summary(cost_model_tobit)
library(tidyverse)
install.packages("tidyverse")
read_dta(
"C:\Users\BJW95\Downloads\MM_Data",
read_dta(
"C:/Users/BJW95/Downloads/MM_Data.dta",
encoding = NULL,
col_select = NULL,
skip = 0,
n_max = Inf,
.name_repair = "unique"
)
library(tidyverse)
read_dta(
"C:/Users/BJW95/Downloads/MM_Data.dta",
encoding = NULL,
col_select = NULL,
skip = 0,
n_max = Inf,
.name_repair = "unique"
)
?read_dta
install.packages("haven")
library(haven)
read_dta(
"C:/Users/BJW95/Downloads/MM_Data.dta",
encoding = NULL,
col_select = NULL,
skip = 0,
n_max = Inf,
.name_repair = "unique"
)
mm_data <- read_dta(
"C:/Users/BJW95/Downloads/MM_Data.dta",
encoding = NULL,
col_select = NULL,
skip = 0,
n_max = Inf,
.name_repair = "unique"
)
View(mm_data)
mm_data <- mm_data %>%
filter(journal == "American Economic Review")
View(mm_data)
### Filter on AER, RCT method
mm_data <- mm_data %>%
filter(journal == "American Economic Review",
method == "RCT")
View(mm_data)
summary(mm_data$year)
tabulate(mm_data$year)
mm_data <- read_dta(
"C:/Users/BJW95/Downloads/MM_Data.dta",
encoding = NULL,
col_select = NULL,
skip = 0,
n_max = Inf,
.name_repair = "unique"
)
summarise(mm_data$year)
summary(mm_data$year)
### Filter on AER, RCT method
mm_data <- mm_data %>%
filter(journal == "American Economic Review",
method == "RCT"
year == 2015)
### Filter on AER, RCT method
mm_data <- mm_data %>%
filter(journal == "American Economic Review",
method == "RCT",
year == 2015)
View(mm_data)
mm_data <- read_dta(
"C:/Users/BJW95/Downloads/MM_Data.dta",
encoding = NULL,
col_select = NULL,
skip = 0,
n_max = Inf,
.name_repair = "unique"
)
summary(mm_data$year)
### Filter on AER, RCT method
mm_data <- mm_data %>%
filter(journal == "American Economic Review",
method == "RCT",
year == 2015)
mm_data2015 <- mm_data %>%
filter(year == 2015)
mm_data <- read_dta(
"C:/Users/BJW95/Downloads/MM_Data.dta",
encoding = NULL,
col_select = NULL,
skip = 0,
n_max = Inf,
.name_repair = "unique"
)
summary(mm_data$year)
### Filter on AER, RCT method
mm_data <- mm_data %>%
filter(journal == "American Economic Review",
method == "RCT")
mm_data_wide <- mm_data %>%
reshape(
idvar = "article",
direction = "wide"
)
library(tidyr)
mm_data <- mm_data %>%
filter(journal == "American Economic Review",
method == "RCT") %>%
select(
journal:sd,
title
)
View(mm_data)
# Reshape long to wide
mm_data_wide <- mm_data %>%
pivot_longer(
names_from = title,
values_from = sd
)
# Reshape long to wide
mm_data_wide <- mm_data %>%
pivot_wider(
names_from = title,
values_from = sd
)
View(mm_data_wide)
# Reshape long to wide
mm_data_wide <- mm_data %>%
pivot_wider(
names_from = article,
values_from = sd
)
View(mm_data_wide)
mm_data <- mm_data %>%
filter(journal == "American Economic Review",
method == "RCT") %>%
select(
title
)
mm_data <- read_dta(
"C:/Users/BJW95/Downloads/MM_Data.dta",
encoding = NULL,
col_select = NULL,
skip = 0,
n_max = Inf,
.name_repair = "unique"
)
summary(mm_data$year)
### Filter on AER, RCT method, keeping only name
mm_data <- mm_data %>%
filter(journal == "American Economic Review",
method == "RCT") %>%
select(
title
)
mm_data <- mm_data %>%
filter(journal == "American Economic Review",
method == "RCT") %>%
select(
title
) %>%
group_by(title)
mm_data <- read_dta(
"C:/Users/BJW95/Downloads/MM_Data.dta",
encoding = NULL,
col_select = NULL,
skip = 0,
n_max = Inf,
.name_repair = "unique"
)
summary(mm_data$year)
### Filter on AER, RCT method, keeping only name
mm_data <- mm_data %>%
filter(journal == "American Economic Review",
method == "RCT") %>%
select(
title
) %>%
group_by(title)
mm_data <- read_dta(
"C:/Users/BJW95/Downloads/MM_Data.dta",
encoding = NULL,
col_select = NULL,
skip = 0,
n_max = Inf,
.name_repair = "unique"
)
summary(mm_data$year)
### Filter on AER, RCT method, keeping only name
mm_data <- mm_data %>%
filter(journal == "American Economic Review",
method == "RCT") %>%
select(
title
) %>%
summarise(across(title))
?distinct
mm_data <- mm_data %>%
filter(journal == "American Economic Review",
method == "RCT") %>%
select(
title
) %>%
distinct()
mm_data <- read_dta(
"C:/Users/BJW95/Downloads/MM_Data.dta",
encoding = NULL,
col_select = NULL,
skip = 0,
n_max = Inf,
.name_repair = "unique"
)
summary(mm_data$year)
### Filter on AER, RCT method, keeping only name
mm_data <- mm_data %>%
filter(journal == "American Economic Review",
method == "RCT") %>%
select(
title
) %>%
distinct()
View(mm_data)
mm_data <- read_dta(
"C:/Users/BJW95/Downloads/MM_Data.dta",
encoding = NULL,
col_select = NULL,
skip = 0,
n_max = Inf,
.name_repair = "unique"
)
summary(mm_data$year)
### Filter on AER, RCT method, keeping only name
mm_data <- mm_data %>%
filter(journal == "American Economic Review",
method == "RCT") %>%
select(
title,
year
) %>%
distinct()
summary(mm_data$year)
mm_data <- read_dta(
"C:/Users/BJW95/Downloads/MM_Data.dta",
encoding = NULL,
col_select = NULL,
skip = 0,
n_max = Inf,
.name_repair = "unique"
)
mm_data <- mm_data %>%
filter(method == "RCT") %>%
select(
title,
year
) %>%
distinct()
View(mm_data)
mm_data <- read_dta(
"C:/Users/BJW95/Downloads/MM_Data.dta",
encoding = NULL,
col_select = NULL,
skip = 0,
n_max = Inf,
.name_repair = "unique"
)
### Filter on AER, RCT method, keeping only name
mm_data <- mm_data %>%
filter(journal == "American Economic Review",
method == "RCT") %>%
select(
title,
year
) %>%
distinct()
# load data, available in GitHub repo mwelz/GenericML
df <- read.dta(here("replication/replication_docs/datasets/studysample_allmerged.dta"))
# put all of the packages that you import here
librarian::shelf(
cran_repo = "https://cran.microsoft.com/", # Dallas, TX
ask = FALSE,
stats, # https://stackoverflow.com/questions/26935095/r-dplyr-filter-not-masking-base-filter#answer-26935536
here,
tidyverse,
foreign,
haven,
ranger,
glmnet,
e1071,
xgboost,
GenericML,
devtools
)
# set wd to this file path of this source file in order to successfully execute 'here' package. For example:
setwd(C:/Users/BJW95/Documents/GitHub/het_treat_effects)
\
# set wd to this file path of this source file in order to successfully execute 'here' package. For example:
setwd("C:\Users\BJW95\Documents\GitHub\het_treat_effects")
# set wd to this file path of this source file in order to successfully execute 'here' package. For example:
setwd("C:/Users/BJW95/Documents/GitHub/het_treat_effects")
install.packages(ranger)
install.packages("ranger")
install.packages("glmnet")
install.packages("e1071")
install.packages("xgboost")
install.packages("GenericML")
install.packages("devtools")
# put all of the packages that you import here
librarian::shelf(
cran_repo = "https://cran.microsoft.com/", # Dallas, TX
ask = FALSE,
stats,
here,
tidyverse,
foreign,
haven,
ranger,
glmnet,
e1071,
xgboost,
GenericML,
devtools
)
# load data, available in GitHub repo mwelz/GenericML
df <- read.dta(here("replication/replication_docs/datasets/studysample_allmerged.dta"))
X1 <- setup_X1(funs_Z = c("B", "S"),
fixed_effects = vil_pair)
url_data <-
url(paste0(
"https://github.com/mwelz/GenericML/blob/main/slides",
"/data/morocco_preprocessed.Rdata?raw=true"
))
load(url_data)
View(Z)
?GenericML
# newest version not yet on CRAN
devtools::install_github("mwelz/GenericML")
